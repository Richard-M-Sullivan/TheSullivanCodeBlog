package sudoku_solver

import "github.com/Richard-M-Sullivan/TheSullivanCodeBlog/templates"

templ SudokuSolver() {
@templates.BaseHeader("The Sullivan Code Blog") {

<body class="min-h-svh h-full bg-slate-800 flex flex-col justify-start sm:justify-start sm:items-center">
  @templates.Navigation()
  <main class="flex-grow justify-start">
    @templates.ContentSection() {
        @why_sudoku()
    }
    @templates.ContentSection() {
        @sudoku()
    }
    @templates.ContentSection() {
        @summary()
    }
  </main>
  @templates.Footer()
  <script src="/javascript/sudoku.js"></script>
</body>
}
}

templ why_sudoku() {
  <p class="text-slate-100">
    The goal for this project was to practice recursion and back tracking algorithms.
  </p>

}

templ sudoku() {
<div class="flex flex-col justify-center space-y-5">
  <p class="text-2xl text-center text-orange-500">
    Sudoku Solver
  </p>

  <div class="flex flex-col justify-center">
    <div class="flex justify-center pb-5">
      <div id="sudoku-board" class="flex justify-center pb-5 ring ring-orange-500">
      </div>
    </div>

    <div class="flex flex-row">
      <div class="flex flex-col items-end grow">
          <button id="sudoku-solve" type="button" class="rounded-md font-mono px-8 mb-5 ring ring-orange-500 text-orange-500 transition-colors duration-200 hover:bg-slate-700">solve</button>
          <button id="sudoku-reset" type="button" class="rounded-md font-mono px-8 mb-5 ring ring-orange-500 text-orange-500 transition-colors duration-200 hover:bg-slate-700">reset</button>
          <button id="sudoku-clear" type="button" class="rounded-md font-mono px-8 mb-5 ring ring-orange-500 text-orange-500 transition-colors duration-200 hover:bg-slate-700">clear</button>
      </div>

      <div class="flex flex-col items-start pl-20 grow">
        <textarea id="solver-output" rows="5" cols="20" readonly class="rounded-md ring ring-orange-500">Fill in the needed cells and click solve.</textarea>
      </div>
    </div>
  </div>
</div>
}

templ summary() {

  <p class="text-2xl text-orange-500 block pb-5">Methodology</p>

  <p class="text-slate-100 pb-5">
    I found that making the sudoku board as a standalone application to be the easiest method of development.
    This is because server side rendering requires me to rebuild the project to apply changes.
    Manually rebuilding all the time added lots of friction to the development process, which is why I decided to first build the core structure and functionality with javascript.
    Then, after the application was completed, I would focus on embedding the applicaiton into my website and applying styling.
  </p>

  <p class="text-2xl text-orange-500 block pb-5">Building The Sudoku Board</p>

  <p class="text-slate-100 pb-5">
    The first step to implement the sudoku solver was to create the board.
    The requirements for the board were that it needed to be a 9x9 grid of cells, and each cell needed to allow the user to enter a number.
    For this, I decided to use a grid element to lay out the cells and use an input element for each cell.
    I created a make_board function that takes in an element id and appends the generated board to that element.
  </p>

  <div class="flex justify-center p-5 pt-0">
  <img src="/media/projects/js-mini/fetch/canvas-boxes-lines.jpeg"
       alt="drawing of random boxes and lines on the canvas"
       width="500" height="500"
       class="inline-block"> 
  </div>

  <p class="text-slate-100 pb-5">
    above we see my first iteration.
    This is a 9x9 grid of div elements that coontain a header to display the cell number.
    After createing the 9x9 grid, I populated each spot in the grid with another 9x9 grid.
    The result is a grid of grids.
    I then iterated over the sub grides and added all of the cells.
    I chose the grid of grids to make it easier to style with the trade off of making it more tricky to partition the 2d array of cells into the 3x3 grid of 3x3 grids. Below is the final board layout completed.
  </p>

  <div class="flex justify-center p-5 pt-0">
  <img src="/media/projects/js-mini/fetch/BouncyBall.gif"
       alt="gif of a ball floating around the canvas"
       width="500" height="500"
       class="inline-block"> 
  </div>

  <p class="text-slate-100 pb-5">
  </p>

  <div class="flex justify-center p-5 pt-0">
  <img src="/media/projects/js-mini/fetch/gravity-ball.gif"
       alt="gif of a ball falling and bouncing onto the ground"
       width="500" height="500"
       class="inline-block"> 
  </div>


  <p class="text-2xl text-orange-500 block pb-5">Person</p>

  <p class="text-slate-100 pb-5">
  </p>

  <div class="flex justify-center p-5 pt-0">
  <img src="/media/projects/js-mini/fetch/slide-person.gif"
       alt="gif of a ball falling and bouncing onto the ground"
       width="500" height="500"
       class="inline-block"> 
  </div>

  <p class="text-slate-100 pb-5">
  </p>

  <div class="flex justify-center p-5 pt-0">
  <img src="/media/projects/js-mini/fetch/swizzle-person.gif"
       alt="gif of a ball falling and bouncing onto the ground"
       width="500" height="500"
       class="inline-block"> 
  </div>

  <p class="text-2xl text-orange-500 block pb-5">Dog</p>

  <p class="text-slate-100 pb-5">
  </p>

  <div class="flex justify-center p-5 pt-0">
  <img src="/media/projects/js-mini/fetch/person-dog.png"
       alt="gif of a ball falling and bouncing onto the ground"
       width="500" height="500"
       class="inline-block"> 
  </div>

  <p class="text-2xl text-orange-500 block pb-5">Adding Interaction</p>
  <p class="text-slate-100 pb-5">
  </p>

  <p class="text-2xl text-orange-500 block pb-5">Improvements</p>
  <p class="text-slate-100 pb-5">
  </p>

}

